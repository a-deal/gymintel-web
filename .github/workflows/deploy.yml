name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        env:
          VITE_GRAPHQL_ENDPOINT: ${{ secrets.PRODUCTION_GRAPHQL_ENDPOINT }}
          VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: frontend/

  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}

  post-deploy-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test production endpoints
        run: |
          # Test backend health
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health
          
          # Test GraphQL endpoint
          curl -X POST ${{ secrets.PRODUCTION_API_URL }}/graphql \
            -H "Content-Type: application/json" \
            -d '{"query": "query { __typename }"}'
          
          # Test frontend
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Deployment successful!"
          echo "Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}"
          echo "Backend: ${{ secrets.PRODUCTION_API_URL }}"