name: Deploy Preview to Staging

on:
  push:
    branches-ignore:
      - main

jobs:
  # Run tests first
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run tests
        run: |
          cd frontend
          npm run lint
          npm run type-check
          npm run test

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD || 'testpass' }}
          POSTGRES_USER: ${{ secrets.STAGING_DB_USER || 'testuser' }}
          POSTGRES_DB: ${{ secrets.STAGING_DB_NAME || 'test_gymintel' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run tests
        env:
          TEST_DATABASE_HOST: localhost
          TEST_DATABASE_PORT: 5432
          TEST_DATABASE_NAME: ${{ secrets.STAGING_DB_NAME || 'test_gymintel' }}
          TEST_DATABASE_USER: ${{ secrets.STAGING_DB_USER || 'testuser' }}
          TEST_DATABASE_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD || 'testpass' }}
          ENVIRONMENT: staging
        run: |
          cd backend
          black --check .
          isort --check-only .
          flake8 . --max-line-length=88 --extend-ignore=E203,W503
          pytest -x

  deploy-backend:
    name: Deploy Backend Preview to Railway Staging
    needs: test-backend
    runs-on: ubuntu-latest
    if: |
      success() &&
      github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
          DATABASE_HOST: ${{ secrets.STAGING_DB_HOST }}
          DATABASE_NAME: ${{ secrets.STAGING_DB_NAME }}
          DATABASE_USER: ${{ secrets.STAGING_DB_USER }}
          DATABASE_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          YELP_API_KEY: ${{ secrets.STAGING_YELP_API_KEY }}
          GOOGLE_PLACES_API_KEY: ${{ secrets.STAGING_GOOGLE_PLACES_API_KEY }}
        run: |
          cd backend
          railway link ${{ secrets.RAILWAY_STAGING_PROJECT_ID }}
          railway up --environment staging --detach

  deploy-frontend:
    name: Deploy Frontend Preview to Vercel Staging
    needs: test-frontend
    runs-on: ubuntu-latest
    if: |
      success() &&
      github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Preview to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          VITE_GRAPHQL_ENDPOINT: ${{ secrets.STAGING_GRAPHQL_ENDPOINT }}
          VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.STAGING_MAPBOX_TOKEN }}
        run: |
          cd frontend
          vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
          vercel build --token=$VERCEL_TOKEN \
            --env VITE_GRAPHQL_ENDPOINT=$VITE_GRAPHQL_ENDPOINT \
            --env VITE_MAPBOX_ACCESS_TOKEN=$VITE_MAPBOX_ACCESS_TOKEN
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=$VERCEL_TOKEN)
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

  comment-preview:
    name: Comment Preview URLs
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Comment deployment URLs
        uses: actions/github-script@v7
        with:
          script: |
            const branch = process.env.BRANCH_NAME;
            const body = `## 🔍 Preview Deployment

            Branch: \`${branch}\`

            ### Staging URLs:
            - **Frontend**: https://gymintel-web-staging.vercel.app
            - **Backend**: https://gymintel-backend-staging.railway.app
            - **GraphQL Playground**: https://gymintel-backend-staging.railway.app/graphql

            ### Health Checks:
            - Backend: https://gymintel-backend-staging.railway.app/health
            - API Docs: https://gymintel-backend-staging.railway.app/docs

            > Note: This is a preview deployment to the staging environment.`;

            // Find the most recent commit
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 1
            });

            if (commits.length > 0) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commits[0].sha,
                body: body
              });
            }
